#########################################################################################
#########################################################################################
#########################################################################################

name: Pipeline Unity Android with play and backup 

on:
  push:
    paths:
      - 'version.txt'
  pull_request:
    paths:
      - 'version.txt'
  workflow_dispatch:
    inputs:
      deploy_only:
        description: "Deploy to Google Play"
        required: false
        type: boolean

jobs:
  buildForAndroid:
    name: Setup and Build for Android
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.deploy_only != 'true'
    steps:
      - name: Free Disk Space for Android
        run: |
          df -h
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Copy version.txt to Resources
        run: |
          mkdir -p Assets/Resources
          cp version.txt Assets/Resources/version.txt

      - name: Verify version.txt file
        run: cat Assets/Resources/version.txt

      - name: Get version
        id: get_version
        run: |
          cat version.txt
          VERSION=$(grep 'NAME_NAME_VERSION' version.txt | cut -d'=' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          VERSION_CODE=$(echo $VERSION | tr -d '.' | sed 's/^0*//')
          echo " - VERSION_CODE: $VERSION_CODE"
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV

      - name: Ensure Library Directory Exists
        run: mkdir -p Library

      - name: Cache Unity Library
        uses: actions/cache@v4
        with:
          path: |
            Library
            ProjectSettings
            Packages
          key: Library-${{ runner.os }}-Unity-${{ env.UNITY_VERSION }}-Android
          restore-keys: |
            Library-${{ runner.os }}-Unity-${{ env.UNITY_VERSION }}-Android-
            Library-${{ runner.os }}-Unity-${{ env.UNITY_VERSION }}-
            Library-${{ runner.os }}-
            Library-

      - name: Verify Library Contents After Cache
        run: ls -la Library

      - name: Check Unity Library Cache
        run: ls -la Library || echo "Library folder does not exist."     

      - name: Create directory for logs
        run: mkdir -p build_logs

      - name: Build Unity Project
        id: buildStep
        uses: game-ci/unity-builder@v4
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          unityVersion: 2021.3.23f1
          targetPlatform: Android
          buildMethod: BuildScript.BuildAndroid
          androidKeystoreName: name-keystore.jks
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}
          androidTargetSdkVersion: AndroidApiLevel34
          versioning: Custom
          version: ${{ env.VERSION }}
          androidVersionCode: ${{ env.VERSION_CODE }}

      - name: Copy build and logs to build_logs
        run: |
          if [ -d "Library/Logs/Unity" ]; then
            cp -r Library/Logs/Unity build_logs/
          else
            echo "No Unity logs found."
          fi
          cp -r build/* build_logs/

      - name: Zip build logs and outputs
        run: zip -r build_logs.zip build_logs/

      - name: Upload Build Logs and Outputs (ZIP)
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: build-logs-and-outputs
          path: build_logs.zip
          retention-days: 7

      - name: List build files
        run: ls -la build/Android

      - name: Upload Build Backup
        uses: actions/upload-artifact@v4
        with:
          name: build-backup
          path: build/Android/*.aab
          retention-days: 30

#########################################################################################
#########################################################################################
#########################################################################################

  uploadToGoogleDrive:
    name: Backup to Google Drive
    runs-on: ubuntu-latest
    needs: buildForAndroid
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Android Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-backup
          path: build/Android

      - name: List build/Android directory
        run: ls -la build/Android

      - name: List APK and AAB files
        run: ls -la build/Android || echo "No files found"

      - name: Capture AAB filename
        run: |
          AAB_FILE=$(ls build/Android/*.aab)
          echo "AAB_FILE=$AAB_FILE" >> $GITHUB_ENV

      - name: Upload Artifacts to Google Drive
        uses: Jumbo810/Upload_Github_Artifacts_TO_GDrive@v2.2.2
        with:
          target: ${{ env.AAB_FILE }}
          credentials: ${{ secrets.GDRIVE_CREDENTIALS_BASE64 }}
          parent_folder_id: "${{ secrets.GDRIVE_FOLDER }}"
          child_folder: "v${{ env.VERSION }}"

          override: true

#########################################################################################
#########################################################################################
#########################################################################################

  deployToGooglePlay:
    name: Deploy to Google Play
    runs-on: ubuntu-latest
    needs: buildForAndroid
    if: github.event.inputs.deploy_only == 'true' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Android Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-backup
          path: build/Android

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2
          bundler-cache: true

      - name: Install Fastlane
        run: sudo gem install fastlane

      - name: Add Authentication
        env:
          GOOGLE_PLAY_KEY_FILE: ${{ secrets.GOOGLE_PLAY_KEY_FILE }}
        run: echo "${GOOGLE_PLAY_KEY_FILE}" > /tmp/google_play_key.json

      - name: Upload to Google Play
        run: |
          fastlane supply --json_key /tmp/google_play_key.json \
          --package_name com.name.name \
          --aab build/Android/*.aab \
          --track internal \
          --release_status draft \
          --skip_upload_metadata true \
          --skip_upload_images true \
          --skip_upload_screenshots true

      - name: Cleanup
        run: rm /tmp/google_play_key.json

#########################################################################################
#########################################################################################
#########################################################################################
